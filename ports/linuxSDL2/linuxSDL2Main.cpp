#include "chip8Core.hpp"
#include "linuxSDL2Backend.hpp"
#include <iostream>
#include <fstream>

const uint8_t testProg[] = {
0x00, 0xe0, 0xa2, 0x20, 0x62, 0x08, 0x60, 0xf8, 0x70, 0x08, 0x61, 0x10, 0x40, 0x20, 0x12, 0x0e,
0xd1, 0x08, 0xf2, 0x1e, 0x71, 0x08, 0x41, 0x30, 0x12, 0x08, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3e, 0x3f, 0x3f, 0x3b, 0x39, 0x38, 0x38, 0x38, 0x00, 0x00, 0x80, 0xc1, 0xe7, 0xff, 0x7e, 0x3c,
0x00, 0x1f, 0xff, 0xf9, 0xc0, 0x80, 0x03, 0x03, 0x00, 0x80, 0xe0, 0xf0, 0x78, 0x38, 0x1c, 0x1c,
0x38, 0x38, 0x39, 0x3b, 0x3f, 0x3f, 0x3e, 0x3c, 0x78, 0xfc, 0xfe, 0xcf, 0x87, 0x03, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xff, 0x7f, 0x1c, 0x38, 0x38, 0x70, 0xf0, 0xe0, 0xc0, 0x00,
0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int chip8Main(int argc, char** argv){
    int ret = 0;
    linuxSDL2Backend backend;
	chip8Core core(backend);
    
    if(argc >= 2){
        int32_t len;
        uint8_t* tmpBuf;
        std::ifstream inFile;
        inFile.open(argv[1], std::ios::binary);
        if(inFile.is_open() && inFile.good()){
            printf("Reading %s...\n", argv[1]);
            inFile.seekg (0, std::ios::end);
            len = inFile.tellg();
            inFile.seekg (0, std::ios::beg);
            if(len > 0){
                tmpBuf = new uint8_t[len];
                inFile.read((char*)tmpBuf, len);
                core.chip8Load((uint8_t*)tmpBuf, len);
                delete[] tmpBuf;
            }
            else{
                printf("File had an invalid size\n");
                ret = 1;
            }
        }
        else{
            printf("File could not be read\n");
            ret = 1;
        }

    }
    else{
        core.chip8Load((uint8_t*)testProg, sizeof(testProg));
    }
    if(!ret){
        SDL_Scancode codes[16] = {SDL_SCANCODE_1,
                                  SDL_SCANCODE_2,
                                  SDL_SCANCODE_3,
                                  SDL_SCANCODE_4,
                                  SDL_SCANCODE_Q,
                                  SDL_SCANCODE_W,
                                  SDL_SCANCODE_E,
                                  SDL_SCANCODE_R,
                                  SDL_SCANCODE_A,
                                  SDL_SCANCODE_S,
                                  SDL_SCANCODE_D,
                                  SDL_SCANCODE_F,
                                  SDL_SCANCODE_Z,
                                  SDL_SCANCODE_X,
                                  SDL_SCANCODE_C,
                                  SDL_SCANCODE_V};
        backend.setKeyMap(codes);
	    core.chip8Start();
    }
    return ret;
}